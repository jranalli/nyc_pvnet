import os
import pandas as pd
import openpyxl

from utils.fileio import verify_dir


def generate_run_summary(files_nested, out_file, overwrite=False):
    """
    Generate a summary table for multiple result files. Outputs a multi-page excel file with tables (row, col). One sheet
    is used for each metric: loss, iou score, precision, recall, f1 score.

    An example usage of the files_nested dict generates a table with test_sets as columns and train_sets as rows:

        res_files = OrderedDict()  # Outer dict (holds columns)
        for test_set in test_sets:  # Column names
            res_files[test_set] = OrderedDict()  # Inner dict (represents a column, holds individual cells row by row)
            for train_set in train_sets:  # Row names
                res_files[test_set][train_set] = this_run_filename.csv  # Build the column row by row

    Parameters
    ----------
    files_nested: dict[dict[str]]
        A 2-D nested dictionary containing all the filenames that matter. Outer dict represents the columns, inner dicts
        represents the rows. Keys in the dicts will be used for the row/col names in the table. All the inner dicts
        representing the values for each column must be consistent. So they all must have the same keys and the same length.
        So it must be built in a spreadsheet-style format. Entries for the inner dict should be the filenames for the
        result files, as generated by `eval_model()`. Almost certainly want to use OrderedDicts.
    out_file: str
        Full context of the summary file to write. Must be XLSX type for writer to work.
    overwrite

    Returns
    -------

    """
    if os.path.exists(out_file) and not overwrite:
        print("generate_run_summary: file exists, skipping...")
        return
    elif "xls" not in os.path.splitext(out_file)[-1]:
        print("Out file must be xlsx type, skipping...")
    verify_dir(os.path.dirname(out_file))

    col_names = list(files_nested.keys())
    row_names = list(files_nested[col_names[0]].keys())
    loss = pd.DataFrame([], index=row_names, columns=col_names)
    iou_score = loss.copy(deep=True)
    precision = loss.copy(deep=True)
    recall = loss.copy(deep=True)
    f1_score = loss.copy(deep=True)

    for i, col_name in enumerate(col_names):
        for j, row_name in enumerate(row_names):

            set_result_file = files_nested[col_name][row_name]
            dat = pd.read_csv(set_result_file)

            loss.iloc[j,i] = dat['loss'][0]
            iou_score.iloc[j, i] = dat['iou_score'][0]
            precision.iloc[j, i] = dat['precision'][0]
            recall.iloc[j, i] = dat['recall'][0]
            f1_score.iloc[j, i] = dat['f1-score'][0]

    with pd.ExcelWriter(out_file) as w:
        loss.to_excel(w, sheet_name="loss")
        iou_score.to_excel(w, sheet_name="iou_score")
        precision.to_excel(w, sheet_name="precision")
        recall.to_excel(w, sheet_name="recall")
        f1_score.to_excel(w, sheet_name="f1_score")
